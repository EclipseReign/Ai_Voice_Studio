#!/usr/bin/env python3
"""Test script to measure audio generation speed for longer text"""
import time
import requests
import json

API = "http://localhost:8001/api"

# Generate a longer text (simulate ~10-15 minutes)
base_paragraph = """
–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–¥–Ω—É –∏–∑ —Å–∞–º—ã—Ö –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞—É–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. 
–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è –ò–ò –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å–µ—Ä–µ–¥–∏–Ω—ã –¥–≤–∞–¥—Ü–∞—Ç–æ–≥–æ –≤–µ–∫–∞, –∫–æ–≥–¥–∞ —É—á–µ–Ω—ã–µ –≤–ø–µ—Ä–≤—ã–µ –∑–∞–¥—É–º–∞–ª–∏—Å—å –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—à–∏–Ω, 
—Å–ø–æ—Å–æ–±–Ω—ã—Ö –º—ã—Å–ª–∏—Ç—å. –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã –≤ 1950-—Ö –≥–æ–¥–∞—Ö, –∫–æ–≥–¥–∞ –ê–ª–∞–Ω –¢—å—é—Ä–∏–Ω–≥ –ø—Ä–µ–¥–ª–æ–∂–∏–ª 
—Å–≤–æ–π –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–π —Ç–µ—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ –º–∞—à–∏–Ω—ã. –í –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ 
–º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –°–∏–º–≤–æ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ 
—Å–µ—Ç–∏ —Å—Ç–∞–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π. –ö–∞–∂–¥—ã–π –∏–∑ —ç—Ç–∏—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∏–º–µ–ª —Å–≤–æ–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, 
–Ω–æ –≤—Å–µ –æ–Ω–∏ –≤–Ω–µ—Å–ª–∏ –≤–∞–∂–Ω—ã–π –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –æ–±–ª–∞—Å—Ç–∏. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç—Ç–∞–ø —Ä–∞–∑–≤–∏—Ç–∏—è –ò–ò –Ω–∞—á–∞–ª—Å—è —Å –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –≥–ª—É–±–æ–∫–æ–≥–æ 
–æ–±—É—á–µ–Ω–∏—è –∏ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –≠—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ–∑–≤–æ–ª–∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—ã, —Å–ø–æ—Å–æ–±–Ω—ã–µ —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ 
—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.
"""

# Repeat to make it longer (~5000 characters = ~15-20 segments)
test_text = (base_paragraph * 8).strip()

print("=" * 60)
print("–¢–ï–°–¢ –°–ö–û–†–û–°–¢–ò –ì–ï–ù–ï–†–ê–¶–ò–ò –ê–£–î–ò–û (–î–õ–ò–ù–ù–´–ô –¢–ï–ö–°–¢)")
print("=" * 60)
print(f"\n–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(test_text)} —Å–∏–º–≤–æ–ª–æ–≤")
print(f"–ü—Ä–∏–º–µ—Ä–Ω–æ ~{len(test_text) / 300:.1f} –º–∏–Ω—É—Ç –∞—É–¥–∏–æ")
print(f"–û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: ~{len(test_text) / 1500:.0f}-{len(test_text) / 1000:.0f}")

# Test with SSE endpoint
print("\n[–¢–ï–°–¢] SSE endpoint —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π...")
print("-" * 60)

start_time = time.time()
url = f"{API}/audio/synthesize-with-progress"
params = {
    'text': test_text,
    'voice': 'ru_RU-irina-medium',
    'rate': 1.0,
    'language': 'ru-RU'
}

# Use requests with stream=True for SSE
response = requests.get(url, params=params, stream=True, timeout=600)

if response.status_code == 200:
    segments_count = 0
    batch_times = []
    last_progress_time = start_time
    
    for line in response.iter_lines():
        if line:
            line_str = line.decode('utf-8')
            if line_str.startswith('data: '):
                try:
                    data = json.loads(line_str[6:])
                    msg_type = data.get('type', '')
                    progress = data.get('progress', 0)
                    message = data.get('message', '')
                    current_time = time.time()
                    
                    if msg_type == 'info':
                        print(f"  üìù [{current_time-start_time:.1f}s] {message}")
                        if '—Å–µ–≥–º–µ–Ω—Ç–æ–≤' in message:
                            import re
                            match = re.search(r'(\d+) —Å–µ–≥–º–µ–Ω—Ç–æ–≤', message)
                            if match:
                                segments_count = int(match.group(1))
                    elif msg_type == 'progress':
                        batch_time = current_time - last_progress_time
                        batch_times.append(batch_time)
                        print(f"  ‚öôÔ∏è  [{current_time-start_time:.1f}s] {message} (+{batch_time:.1f}s)")
                        last_progress_time = current_time
                    elif msg_type == 'complete':
                        elapsed = time.time() - start_time
                        print(f"\n  ‚úÖ –ì–û–¢–û–í–û –∑–∞ {elapsed:.1f} —Å–µ–∫—É–Ω–¥ ({elapsed/60:.2f} –º–∏–Ω—É—Ç)!")
                        print(f"\n  üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
                        print(f"     ‚Ä¢ –í—Å–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {segments_count}")
                        print(f"     ‚Ä¢ –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: {len(test_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                        print(f"     ‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –∞—É–¥–∏–æ: ~{len(test_text)/300:.1f} –º–∏–Ω—É—Ç")
                        print(f"     ‚Ä¢ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {elapsed:.1f} —Å–µ–∫—É–Ω–¥")
                        print(f"     ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {len(test_text)/elapsed:.0f} —Å–∏–º–≤–æ–ª–æ–≤/—Å–µ–∫")
                        if batch_times:
                            avg_batch = sum(batch_times) / len(batch_times)
                            print(f"     ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –±–∞—Ç—á: {avg_batch:.1f}s")
                        
                        # Calculate efficiency
                        audio_minutes = len(test_text) / 300
                        generation_minutes = elapsed / 60
                        ratio = audio_minutes / generation_minutes
                        print(f"\n  ‚ö° –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨: {ratio:.1f}x")
                        print(f"     (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è {audio_minutes:.1f} –º–∏–Ω—É—Ç –∞—É–¥–∏–æ –∑–∞ {generation_minutes:.2f} –º–∏–Ω—É—Ç)")
                        break
                    elif msg_type == 'error':
                        print(f"  ‚ùå –û—à–∏–±–∫–∞: {data.get('message')}")
                        break
                except json.JSONDecodeError as e:
                    pass
else:
    print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")

print("\n" + "=" * 60)
print("–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
print("=" * 60)
