#!/usr/bin/env python3
"""
CRITICAL URL LENGTH FIX TESTING
===============================

This test specifically addresses the user's reported issue:
- Large texts (50 minutes) were not being synthesized
- Button would just reset without errors
- Problem was GET method URL length limit (~8000 chars) vs 50-minute text (~50,000 chars)
- Fix: Changed /api/audio/synthesize-with-progress from GET to POST with JSON body

Test Priority:
1. CRITICAL: Generate 50-minute text and test audio synthesis
2. REGRESSION: Test short texts (1-2 minutes) still work
3. MANUAL INPUT: Test large text input manually
"""

import requests
import json
import time
import sys
from datetime import datetime
from pathlib import Path

class URLLengthFixTester:
    def __init__(self, base_url="https://audiorender-issue.preview.emergentagent.com/api"):
        self.base_url = base_url
        self.session = requests.Session()
        # Add admin credentials for testing (from test_result.md)
        self.session.cookies.set('session_token', 'admin_session_token')
        self.test_results = []
        
    def log_result(self, test_name, success, details):
        """Log test result"""
        result = {
            'test_name': test_name,
            'success': success,
            'details': details,
            'timestamp': datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ PASSED" if success else "‚ùå FAILED"
        print(f"{status}: {test_name}")
        if details:
            print(f"   Details: {details}")
        return success

    def test_voices_available(self):
        """Test that voices are available for synthesis"""
        print("\nüîç Testing voices availability...")
        
        try:
            response = self.session.get(f"{self.base_url}/voices", timeout=30)
            
            if response.status_code == 200:
                voices = response.json()
                
                # Find Russian and English voices
                ru_voices = [v for v in voices if v.get('locale', '').startswith('ru-')]
                en_voices = [v for v in voices if v.get('locale', '').startswith('en-')]
                
                details = f"Found {len(voices)} total voices, {len(ru_voices)} Russian, {len(en_voices)} English"
                
                if ru_voices and en_voices:
                    self.ru_voice = ru_voices[0]['short_name']
                    self.en_voice = en_voices[0]['short_name']
                    return self.log_result("Voices Available", True, details)
                else:
                    return self.log_result("Voices Available", False, "Missing Russian or English voices")
            else:
                return self.log_result("Voices Available", False, f"HTTP {response.status_code}")
                
        except Exception as e:
            return self.log_result("Voices Available", False, f"Error: {str(e)}")

    def generate_large_text(self, duration_minutes=50):
        """Generate large text for testing URL length limits"""
        print(f"\nüîç Generating {duration_minutes}-minute text...")
        
        try:
            # Use POST method for text generation (should work)
            response = self.session.post(
                f"{self.base_url}/text/generate",
                json={
                    "prompt": "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –µ–≥–æ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ",
                    "duration_minutes": duration_minutes,
                    "language": "ru-RU"
                },
                timeout=600  # 10 minutes for large text generation
            )
            
            if response.status_code == 200:
                data = response.json()
                text = data.get('text', '')
                word_count = data.get('word_count', 0)
                
                # Calculate character count and URL length if it were GET
                char_count = len(text)
                estimated_url_length = len(f"{self.base_url}/audio/synthesize-with-progress?text={text}&voice=ru_RU-irina-medium&rate=1.0&language=ru-RU")
                
                details = f"Generated {word_count} words, {char_count} chars. Estimated URL length: {estimated_url_length} chars"
                
                # Check if this would exceed URL limits
                url_limit_exceeded = estimated_url_length > 8000
                
                if url_limit_exceeded:
                    details += f" (EXCEEDS 8000 char URL limit by {estimated_url_length - 8000} chars)"
                
                self.large_text = text
                self.large_text_chars = char_count
                
                return self.log_result(f"Generate {duration_minutes}-minute Text", True, details)
            else:
                return self.log_result(f"Generate {duration_minutes}-minute Text", False, f"HTTP {response.status_code}: {response.text[:200]}")
                
        except Exception as e:
            return self.log_result(f"Generate {duration_minutes}-minute Text", False, f"Error: {str(e)}")

    def generate_short_text(self, duration_minutes=2):
        """Generate short text for regression testing"""
        print(f"\nüîç Generating {duration_minutes}-minute text (regression test)...")
        
        try:
            response = self.session.post(
                f"{self.base_url}/text/generate",
                json={
                    "prompt": "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —ç–Ω–µ—Ä–≥–∏–∏",
                    "duration_minutes": duration_minutes,
                    "language": "ru-RU"
                },
                timeout=120
            )
            
            if response.status_code == 200:
                data = response.json()
                text = data.get('text', '')
                word_count = data.get('word_count', 0)
                char_count = len(text)
                
                details = f"Generated {word_count} words, {char_count} chars"
                
                self.short_text = text
                self.short_text_chars = char_count
                
                return self.log_result(f"Generate {duration_minutes}-minute Text", True, details)
            else:
                return self.log_result(f"Generate {duration_minutes}-minute Text", False, f"HTTP {response.status_code}")
                
        except Exception as e:
            return self.log_result(f"Generate {duration_minutes}-minute Text", False, f"Error: {str(e)}")

    def test_audio_synthesis_post_method(self, text, test_name, voice=None):
        """Test audio synthesis using POST method (the fix)"""
        print(f"\nüî• CRITICAL TEST: {test_name} - POST Method Audio Synthesis")
        print(f"   Text length: {len(text)} characters")
        
        if not voice:
            voice = getattr(self, 'ru_voice', 'ru_RU-irina-medium')
        
        try:
            # Test the FIXED POST endpoint
            start_time = time.time()
            
            response = self.session.post(
                f"{self.base_url}/audio/synthesize-with-progress",
                json={
                    "text": text,
                    "voice": voice,
                    "rate": 1.0,
                    "language": "ru-RU"
                },
                headers={'Content-Type': 'application/json'},
                timeout=600,  # 10 minutes for large audio
                stream=True  # For SSE
            )
            
            if response.status_code == 200:
                # Parse SSE events
                events = []
                final_result = None
                
                for line in response.iter_lines(decode_unicode=True):
                    if line.startswith('data: '):
                        try:
                            event_data = json.loads(line[6:])  # Remove 'data: ' prefix
                            events.append(event_data)
                            
                            if event_data.get('type') == 'complete':
                                final_result = event_data
                                break
                            elif event_data.get('type') == 'error':
                                raise Exception(f"SSE Error: {event_data.get('message')}")
                                
                        except json.JSONDecodeError:
                            continue
                
                synthesis_time = time.time() - start_time
                
                if final_result:
                    audio_id = final_result.get('audio_id')
                    duration = final_result.get('duration', 0)
                    
                    details = f"SUCCESS in {synthesis_time:.1f}s. Audio ID: {audio_id}, Duration: {duration:.1f}s, Events: {len(events)}"
                    
                    # Store for download test
                    if hasattr(self, 'audio_ids'):
                        self.audio_ids.append(audio_id)
                    else:
                        self.audio_ids = [audio_id]
                    
                    return self.log_result(f"{test_name} - POST Audio Synthesis", True, details)
                else:
                    return self.log_result(f"{test_name} - POST Audio Synthesis", False, f"No completion event after {synthesis_time:.1f}s")
            else:
                return self.log_result(f"{test_name} - POST Audio Synthesis", False, f"HTTP {response.status_code}: {response.text[:200]}")
                
        except Exception as e:
            return self.log_result(f"{test_name} - POST Audio Synthesis", False, f"Error: {str(e)}")

    def test_audio_synthesis_get_method_simulation(self, text, test_name):
        """Simulate what would happen with GET method (should fail for large texts)"""
        print(f"\nüîç Simulating OLD GET method for {test_name}...")
        
        # Calculate what the URL would be
        voice = getattr(self, 'ru_voice', 'ru_RU-irina-medium')
        simulated_url = f"{self.base_url}/audio/synthesize-with-progress?text={text}&voice={voice}&rate=1.0&language=ru-RU"
        url_length = len(simulated_url)
        
        # Check if it would exceed typical URL limits
        browser_limit = 2048  # Conservative browser limit
        server_limit = 8192   # Typical server limit
        
        exceeds_browser = url_length > browser_limit
        exceeds_server = url_length > server_limit
        
        if exceeds_server:
            status = "WOULD FAIL (exceeds server limit)"
        elif exceeds_browser:
            status = "WOULD FAIL (exceeds browser limit)"
        else:
            status = "Would work"
        
        details = f"URL length: {url_length} chars. {status}. Browser limit: {browser_limit}, Server limit: {server_limit}"
        
        # This is expected to "fail" for large texts - that's why we needed the fix
        expected_failure = url_length > server_limit
        success = expected_failure if "Large" in test_name else not expected_failure
        
        return self.log_result(f"{test_name} - GET Method Simulation", success, details)

    def test_audio_download(self, audio_id):
        """Test downloading generated audio"""
        print(f"\nüîç Testing audio download for {audio_id}...")
        
        try:
            response = self.session.get(f"{self.base_url}/audio/download/{audio_id}", timeout=30)
            
            if response.status_code == 200:
                content_type = response.headers.get('Content-Type', '')
                content_length = len(response.content)
                
                details = f"Downloaded {content_length} bytes, Content-Type: {content_type}"
                
                # Check if it's actually audio
                is_audio = 'audio' in content_type.lower() or content_length > 1000
                
                if is_audio:
                    return self.log_result("Audio Download", True, details)
                else:
                    return self.log_result("Audio Download", False, f"Not audio content: {details}")
            else:
                return self.log_result("Audio Download", False, f"HTTP {response.status_code}")
                
        except Exception as e:
            return self.log_result("Audio Download", False, f"Error: {str(e)}")

    def test_manual_input_large_text(self):
        """Test manual input with large text (simulating user pasting large text)"""
        print("\nüîç Testing manual input with large text...")
        
        # Create a large text manually (simulating user input)
        large_manual_text = """
        –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–¥–Ω—É –∏–∑ —Å–∞–º—ã—Ö –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ–≤–æ–ª—é—Ü–∏–π –Ω–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –≠—Ç–∞ –æ–±–ª–∞—Å—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –Ω–∞—É–∫–∏ —Å—Ç—Ä–µ–º–∏—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –º–∞—à–∏–Ω—ã, —Å–ø–æ—Å–æ–±–Ω—ã–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ã—á–Ω–æ —Ç—Ä–µ–±—É—é—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –û—Ç –ø—Ä–æ—Å—Ç—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–æ —Å–ª–æ–∂–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π, –ò–ò –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–π.
        
        –ò—Å—Ç–æ—Ä–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ 1950-—Ö –≥–æ–¥–∞—Ö, –∫–æ–≥–¥–∞ —É—á–µ–Ω—ã–µ –≤–ø–µ—Ä–≤—ã–µ –Ω–∞—á–∞–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –º—ã—Å–ª—è—â–∏—Ö –º–∞—à–∏–Ω. –ê–ª–∞–Ω –¢—å—é—Ä–∏–Ω–≥, –æ–¥–∏–Ω –∏–∑ –ø–∏–æ–Ω–µ—Ä–æ–≤ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏, –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–π —Ç–µ—Å—Ç –¢—å—é—Ä–∏–Ω–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ —Å–∏—Ö –ø–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –º–µ—Ä–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –º–∞—à–∏–Ω. –¢–µ—Å—Ç –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ –º–∞—à–∏–Ω–∞ –º–æ–∂–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∏—Ç—å –µ–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è.
        
        –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å—Ç–∞–ª–æ –∫–ª—é—á–µ–≤–æ–π –æ–±–ª–∞—Å—Ç—å—é –ò–ò, –ø–æ–∑–≤–æ–ª—è—é—â–µ–π –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º —É—á–∏—Ç—å—Å—è –∏ —É–ª—É—á—à–∞—Ç—å —Å–≤–æ—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ —è–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞. –≠—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã—è–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –∏–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –ø–æ–¥—Ä–∞–∑–¥–µ–ª –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—è–º–∏ –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö.
        
        –ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ –ø–æ–∏—Å—Ç–∏–Ω–µ –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã. –í –º–µ–¥–∏—Ü–∏–Ω–µ –ò–ò –ø–æ–º–æ–≥–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é, —á–∞—Å—Ç–æ –ø—Ä–µ–≤—ã—à–∞—é—â–µ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é. –í –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ò–ò –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –í —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ñ–µ—Ä–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ò–ò –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—é—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª—è—é—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è–º–∏.
        
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–∞—à–∏–Ω–∞–º –ø–æ–Ω–∏–º–∞—Ç—å –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —è–∑—ã–∫, —á—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª–µ–µ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –º–µ–∂–¥—É —á–µ–ª–æ–≤–µ–∫–æ–º –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º. –°–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏, –º–∞—à–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≤—Å–µ –±–æ–ª–µ–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏, –ø—Ä–∏–±–ª–∏–∂–∞—è—Å—å –∫ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º—É —É—Ä–æ–≤–Ω—é –ø–æ–Ω–∏–º–∞–Ω–∏—è —è–∑—ã–∫–∞.
        
        –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –¥–∞–µ—Ç –º–∞—à–∏–Ω–∞–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å "–≤–∏–¥–µ—Ç—å" –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –≠—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ª–µ–∂–∏—Ç –≤ –æ—Å–Ω–æ–≤–µ –º–Ω–æ–≥–∏—Ö —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –æ—Ç —Å–∏—Å—Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏. –ê–ª–≥–æ—Ä–∏—Ç–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –º–æ–≥—É—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã, –ª–∏—Ü–∞, —ç–º–æ—Ü–∏–∏ –∏ –¥–∞–∂–µ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        
        –†–æ–±–æ—Ç–∏–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –ò–ò —Å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏, —Å–æ–∑–¥–∞–≤–∞—è –º–∞—à–∏–Ω—ã, —Å–ø–æ—Å–æ–±–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º –º–∏—Ä–æ–º. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–æ–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ò–ò –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ä–µ–¥–∞—Ö, –æ—Ç –∑–∞–≤–æ–¥—Å–∫–∏—Ö —Ü–µ—Ö–æ–≤ –¥–æ –¥–æ–º–∞—à–Ω–∏—Ö —Ö–æ–∑—è–π—Å—Ç–≤.
        
        –û–¥–Ω–∞–∫–æ —Ä–∞–∑–≤–∏—Ç–∏–µ –ò–ò —Ç–∞–∫–∂–µ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –≤–∞–∂–Ω—ã–µ —ç—Ç–∏—á–µ—Å–∫–∏–µ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –∑–∞–º–µ—â–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –ò–ò —Ç—Ä–µ–±—É—é—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –æ–±—â–µ—Å—Ç–≤–∞, –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π.
        
        –ë—É–¥—É—â–µ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –æ–±–µ—â–∞–µ—Ç –µ—â–µ –±–æ–ª–µ–µ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ–±—â–µ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ (AGI), –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ª—é–±—É—é –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É, –¥–æ—Å—Ç—É–ø–Ω—É—é —á–µ–ª–æ–≤–µ–∫—É. –ö–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–æ–≥—É—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—É—á–µ–Ω–∏–µ –ò–ò-—Å–∏—Å—Ç–µ–º.
        
        –í–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ —É—Å–ø–µ—à–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –ò–ò —Ç—Ä–µ–±—É–µ—Ç –º–µ–∂–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞, –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—É—é –Ω–∞—É–∫—É, –º–∞—Ç–µ–º–∞—Ç–∏–∫—É, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é, —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é –∏ –¥—Ä—É–≥–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∑–Ω–∞–Ω–∏–π. –¢–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ç–∞–∫–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –º—ã —Å–º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –ò–ò-—Å–∏—Å—Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –º–æ—â–Ω—ã–º–∏, –Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏, —ç—Ç–∏—á–Ω—ã–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏ –¥–ª—è –≤—Å–µ–≥–æ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞.
        """ * 5  # Multiply to make it really large
        
        char_count = len(large_manual_text)
        
        # Test synthesis with this large manual text
        return self.test_audio_synthesis_post_method(large_manual_text, f"Manual Input Large Text ({char_count} chars)")

    def run_critical_tests(self):
        """Run the critical URL length fix tests"""
        print("üöÄ CRITICAL URL LENGTH FIX TESTING")
        print("=" * 60)
        print("Testing the fix for large text audio synthesis issue")
        print("Problem: GET method URL length limit vs large text content")
        print("Solution: POST method with JSON body")
        print("=" * 60)
        
        all_passed = True
        
        # Step 1: Get voices
        if not self.test_voices_available():
            print("‚ùå Cannot proceed without voices")
            return False
        
        # Step 2: Generate large text (50 minutes)
        print("\n" + "="*50)
        print("STEP 1: GENERATE LARGE TEXT (50 MINUTES)")
        print("="*50)
        
        if not self.generate_large_text(50):
            print("‚ùå Cannot proceed without large text")
            return False
        
        # Step 3: Test URL length simulation (what would happen with GET)
        print("\n" + "="*50)
        print("STEP 2: SIMULATE OLD GET METHOD (SHOULD FAIL)")
        print("="*50)
        
        self.test_audio_synthesis_get_method_simulation(self.large_text, "Large Text")
        
        # Step 4: Test POST method with large text (THE CRITICAL FIX)
        print("\n" + "="*50)
        print("STEP 3: TEST NEW POST METHOD (SHOULD WORK)")
        print("="*50)
        
        large_synthesis_success = self.test_audio_synthesis_post_method(self.large_text, "Large Text (50 min)")
        if not large_synthesis_success:
            all_passed = False
        
        # Step 5: Regression test - short text
        print("\n" + "="*50)
        print("STEP 4: REGRESSION TEST - SHORT TEXT")
        print("="*50)
        
        if self.generate_short_text(2):
            self.test_audio_synthesis_get_method_simulation(self.short_text, "Short Text")
            short_synthesis_success = self.test_audio_synthesis_post_method(self.short_text, "Short Text (2 min)")
            if not short_synthesis_success:
                all_passed = False
        else:
            all_passed = False
        
        # Step 6: Manual input test
        print("\n" + "="*50)
        print("STEP 5: MANUAL INPUT LARGE TEXT TEST")
        print("="*50)
        
        manual_success = self.test_manual_input_large_text()
        if not manual_success:
            all_passed = False
        
        # Step 7: Test downloads
        print("\n" + "="*50)
        print("STEP 6: TEST AUDIO DOWNLOADS")
        print("="*50)
        
        if hasattr(self, 'audio_ids') and self.audio_ids:
            for audio_id in self.audio_ids[-2:]:  # Test last 2 audio files
                download_success = self.test_audio_download(audio_id)
                if not download_success:
                    all_passed = False
        
        # Final summary
        print("\n" + "="*60)
        print("üèÅ CRITICAL TEST RESULTS SUMMARY")
        print("="*60)
        
        passed_tests = sum(1 for result in self.test_results if result['success'])
        total_tests = len(self.test_results)
        
        print(f"Tests passed: {passed_tests}/{total_tests}")
        print(f"Success rate: {(passed_tests/total_tests)*100:.1f}%")
        
        # Key findings
        print("\nüîç KEY FINDINGS:")
        
        # Check if large text would fail with GET
        large_text_chars = getattr(self, 'large_text_chars', 0)
        if large_text_chars > 8000:
            print(f"‚úÖ Large text ({large_text_chars} chars) WOULD FAIL with GET method (exceeds 8000 char limit)")
        
        # Check if POST method worked for large text
        large_post_success = any(r['success'] for r in self.test_results if 'Large Text (50 min)' in r['test_name'] and 'POST' in r['test_name'])
        if large_post_success:
            print("‚úÖ POST method SUCCESSFULLY handles large text (FIX WORKING)")
        else:
            print("‚ùå POST method FAILED for large text (FIX NOT WORKING)")
        
        # Check regression
        short_post_success = any(r['success'] for r in self.test_results if 'Short Text (2 min)' in r['test_name'] and 'POST' in r['test_name'])
        if short_post_success:
            print("‚úÖ Short text still works (NO REGRESSION)")
        else:
            print("‚ùå Short text broken (REGRESSION DETECTED)")
        
        if all_passed:
            print("\nüéâ ALL CRITICAL TESTS PASSED - URL LENGTH FIX IS WORKING!")
        else:
            print("\n‚ö†Ô∏è  SOME TESTS FAILED - REVIEW NEEDED")
        
        return all_passed

def main():
    tester = URLLengthFixTester()
    success = tester.run_critical_tests()
    
    # Save results
    with open('/app/url_length_fix_test_results.json', 'w') as f:
        json.dump({
            'timestamp': datetime.now().isoformat(),
            'overall_success': success,
            'test_results': tester.test_results
        }, f, indent=2)
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())